import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) 
    {
        Scanner in = new Scanner(System.in);
        int q = in.nextInt();
        for(int a0 = 0; a0 < q; a0++)
	{
            int n = in.nextInt();
     
            Node[] nodes = new Node[n]; // an array of Node Objects
            for(int i = 0; i < n; i++)
            {
                nodes[i] = new Node(i);
            }
            
            int m = in.nextInt();
            for(int a1 = 0; a1 < m; a1++)
	    {
                int u = in.nextInt();
                int v = in.nextInt();
		
	        /* undirected graph */                
                nodes[u-1].adjacentList.add(v-1); 
                nodes[v-1].adjacentList.add(u-1);
            }

            int s = in.nextInt();
            
            getMinDistance(nodes, s-1);
            System.out.println();
        }
        in.close();
    }
    
    public static class Node
    {
           int vertex;
           int distance;
           LinkedList<Integer> adjacentList;
            
            public Node(int inVertex)
            {
                vertex = inVertex;
                distance = -1; // -1 means node is not visited
                adjacentList = new LinkedList<Integer>();
            }
    }
    
    public static void getMinDistance(Node[] nodes, int source)
    {
        int[] distances = new int[nodes.length];
        for(int i = 0; i < distances.length; i++)
        {
            distances[i] = -1; // question says to print -1 if the node is not connected to the source
        }
        
        Queue<Node> queue = new LinkedList<Node>();
 
        nodes[source].distance = 0;
        queue.add(nodes[source]);
        
        int vertex = 0; int distance = 0;
        
        Node node;
        while(!queue.isEmpty())
        {
            node = queue.remove();
            vertex = node.vertex;
            distance = node.distance;
            
            for(int adjacent : node.adjacentList)
            {
		if(nodes[adjacent].distance < 0)
               	{
		    distances[adjacent] = (distance+1)*6;
                    nodes[adjacent].distance = distance + 1;
                    queue.add(nodes[adjacent]);
                }
	    }        
        }
        
        for(int i = 0; i < distances.length; i++)
        {
            if(i != source)
            {
                System.out.print(distances[i] + " ");
            }   
        }
    }
}

