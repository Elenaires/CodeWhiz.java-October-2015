/* 1st mistake - when reading input for ladder and snakes, missed out the fact that the array starts from 0 thus input must be input - 1 ie board 32 is actually 31, board 1 is actually 0
2nd mistake - missed out cases where there is no solution
*/

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        int numTestCase = sc.nextInt();
        //System.out.println("numTestCase is " + numTestCase);
        int numLadder;
        int numSnake;
        int[] move; 
      
        
        for(int i = 0; i < numTestCase; i++)
        {
            numLadder = sc.nextInt();
            //System.out.println("numLadder is " + numLadder);
            move = new int[100];
            for(int y = 0; y < 100; y++)
            {
                move[y] = -1; // assume that all boards do not have ladder or snake
            }
            
            for(int k = 0; k < numLadder; k++)
            {
                int startOfLadder = sc.nextInt();
                //System.out.println("startofLadder is " + startOfLadder);
                int endOfLadder = sc.nextInt();
                //System.out.println("endofLadder is " + endOfLadder);
                 move[startOfLadder-1] = endOfLadder-1;
            }
            
            numSnake = sc.nextInt();
            //System.out.println("numSnake is " + numSnake);
            for(int k = 0; k < numSnake; k++)
            {
                int snakeHead = sc.nextInt();
                //System.out.println("snakeHead is " + snakeHead);
                int snakeTail = sc.nextInt();
                //System.out.println("snakeTail is " + snakeTail);
                move[snakeHead-1] = snakeTail-1;
            }
            
            int minDiceThrow = getMinDiceThrow(move);

            System.out.println(minDiceThrow);  
        }
        
    }
    
    public static class Entry
    {
        int vertex;
        int distance;
        // okay to use public class fields???

        public Entry()
        {
            vertex = 0;
            distance = 0;
        }
        
        public Entry(int inVertex, int inDistance)
        {
            vertex = inVertex;
            distance = inDistance;
        }
    }
    
    public static int getMinDiceThrow(int[] array)
    { 
        boolean[] visited = new boolean[array.length];
        boolean completed = false;
        Queue<Entry> queue = new LinkedList<Entry>();
        Entry entry = new Entry();
        
        visited[0] = true;
        queue.add(entry);
        int vertex = 0, distance = 0;
        while((!queue.isEmpty()) && (!completed))
        {
            entry = queue.remove();
            vertex = entry.vertex;
            distance = entry.distance;
            if(vertex == array.length-1)
            {
                completed = true;
            }
            else
            {
                for(int i = vertex + 1; i <= vertex + 6; i++)
                {
                    if(i < array.length)
                    {
                        if(!visited[i])
                        {
                            visited[i] = true;
                            Entry newEntry;
                            if(array[i] == -1)
                            {
                                newEntry = new Entry(i, distance+1);
                            }
                            else
                            {
                                newEntry = new Entry(array[i], distance+1);
                            }
                            queue.add(newEntry);
                        }
                    }
                }
            }
        }
        
        if(!completed) // returns -1 if no solution
        {
            distance = -1;
        }
      
        return distance; 
    }
}
